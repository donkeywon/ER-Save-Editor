#[allow(unused)]
#[repr(i16)]
#[derive(Default)]
pub(crate) enum WeaponType {
    #[default]
    None = 0,
    Dagger = 1,
    StraightSword = 3,
    Greatsword = 5,
    ColossalSword = 7,
    CurvedSword = 9,
    CurvedGreatsword = 11,
    Katana = 13,
    Twinblade = 14,
    ThrustingSword = 15,
    HeavyThrustingSword = 16,
    Axe = 17,
    Greataxe = 19,
    Hammer = 21,
    GreatHammer = 23,
    Flail = 24,
    Spear = 25,
    HeavySpear = 28,
    Halberd = 29,
    Scythe = 31,
    Fist = 35,
    Claw = 37,
    Whip = 39,
    ColossalWeapon = 41,
    LightBow = 50,
    Bow = 51,
    Greatbow = 53,
    Crossbow = 55,
    Ballista = 56,
    Staff = 57,
    Seal = 61,
    SmallShield = 65,
    MediumShield = 67,
    Greatshield = 69,
    Arrow = 81,
    Greatarrow = 83,
    Bolt = 85,
    BallistaBolt = 86,
    Torch = 87,
    HandToHand = 88,
    ThrustingShield = 90,
    ThowingBlade = 91,
    ReverseHandBlade = 92,
    LightGreatSword = 93,
    GreatKatana = 94,
    BeastClaw = 95,
}

impl WeaponType {
    pub(crate) fn can_mount(
        &self,
        gem_param: &<er_save_lib::EquipParamGem::EquipParamGem as er_save_lib::param_trait::Param>::ParamType,
    ) -> bool {
        match self {
            WeaponType::None => false,
            WeaponType::Dagger => gem_param.canMountWep_Dagger == 1,
            WeaponType::StraightSword => gem_param.canMountWep_SwordNormal == 1,
            WeaponType::Greatsword => gem_param.canMountWep_SwordLarge == 1,
            WeaponType::ColossalSword => gem_param.canMountWep_SwordGigantic == 1,
            WeaponType::CurvedSword => gem_param.canMountWep_SaberNormal == 1,
            WeaponType::CurvedGreatsword => gem_param.canMountWep_SaberLarge == 1,
            WeaponType::Katana => gem_param.canMountWep_katana == 1,
            WeaponType::Twinblade => gem_param.canMountWep_SwordDoubleEdge == 1,
            WeaponType::ThrustingSword => gem_param.canMountWep_SwordPierce == 1,
            WeaponType::HeavyThrustingSword => gem_param.canMountWep_RapierHeavy == 1,
            WeaponType::Axe => gem_param.canMountWep_AxeNormal == 1,
            WeaponType::Greataxe => gem_param.canMountWep_AxeLarge == 1,
            WeaponType::Hammer => gem_param.canMountWep_HammerNormal == 1,
            WeaponType::GreatHammer => gem_param.canMountWep_HammerLarge == 1,
            WeaponType::Flail => gem_param.canMountWep_Flail == 1,
            WeaponType::Spear => gem_param.canMountWep_SpearNormal == 1,
            WeaponType::HeavySpear => gem_param.canMountWep_SpearHeavy == 1,
            WeaponType::Halberd => gem_param.canMountWep_SpearAxe == 1,
            WeaponType::Scythe => gem_param.canMountWep_Sickle == 1,
            WeaponType::Fist => gem_param.canMountWep_Knuckle == 1,
            WeaponType::Claw => gem_param.canMountWep_Claw == 1,
            WeaponType::Whip => gem_param.canMountWep_Whip == 1,
            WeaponType::ColossalWeapon => gem_param.canMountWep_AxhammerLarge == 1,
            WeaponType::LightBow => gem_param.canMountWep_BowSmall == 1,
            WeaponType::Bow => gem_param.canMountWep_BowNormal == 1,
            WeaponType::Greatbow => gem_param.canMountWep_BowLarge == 1,
            WeaponType::Crossbow => gem_param.canMountWep_ClossBow == 1,
            WeaponType::Ballista => gem_param.canMountWep_Ballista == 1,
            WeaponType::Staff => gem_param.canMountWep_Staff == 1,
            WeaponType::Seal => gem_param.canMountWep_Talisman == 1,
            WeaponType::SmallShield => gem_param.canMountWep_ShieldSmall == 1,
            WeaponType::MediumShield => gem_param.canMountWep_ShieldNormal == 1,
            WeaponType::Greatshield => gem_param.canMountWep_ShieldLarge == 1,
            WeaponType::Torch => gem_param.canMountWep_Torch == 1,
            WeaponType::HandToHand => gem_param.canMountWep_HandToHand == 1,
            WeaponType::ThrustingShield => gem_param.canMountWep_ThrustingShield == 1,
            WeaponType::ThowingBlade => gem_param.canMountWep_ThrowingWeapon == 1,
            WeaponType::ReverseHandBlade => gem_param.canMountWep_ReverseHandSword == 1,
            WeaponType::LightGreatSword => gem_param.canMountWep_LightGreatsword == 1,
            WeaponType::GreatKatana => gem_param.canMountWep_GreatKatana == 1,
            WeaponType::BeastClaw => gem_param.canMountWep_BeastClaw == 1,
            _ => false,
        }
    }
}

impl From<i16> for WeaponType {
    fn from(value: i16) -> Self {
        match value {
            v if v == WeaponType::None as i16 => WeaponType::None,
            v if v == WeaponType::Dagger as i16 => WeaponType::Dagger,
            v if v == WeaponType::StraightSword as i16 => WeaponType::StraightSword,
            v if v == WeaponType::Greatsword as i16 => WeaponType::Greatsword,
            v if v == WeaponType::ColossalSword as i16 => WeaponType::ColossalSword,
            v if v == WeaponType::CurvedSword as i16 => WeaponType::CurvedSword,
            v if v == WeaponType::CurvedGreatsword as i16 => WeaponType::CurvedGreatsword,
            v if v == WeaponType::Katana as i16 => WeaponType::Katana,
            v if v == WeaponType::Twinblade as i16 => WeaponType::Twinblade,
            v if v == WeaponType::ThrustingSword as i16 => WeaponType::ThrustingSword,
            v if v == WeaponType::HeavyThrustingSword as i16 => WeaponType::HeavyThrustingSword,
            v if v == WeaponType::Axe as i16 => WeaponType::Axe,
            v if v == WeaponType::Greataxe as i16 => WeaponType::Greataxe,
            v if v == WeaponType::Hammer as i16 => WeaponType::Hammer,
            v if v == WeaponType::GreatHammer as i16 => WeaponType::GreatHammer,
            v if v == WeaponType::Flail as i16 => WeaponType::Flail,
            v if v == WeaponType::Spear as i16 => WeaponType::Spear,
            v if v == WeaponType::HeavySpear as i16 => WeaponType::HeavySpear,
            v if v == WeaponType::Halberd as i16 => WeaponType::Halberd,
            v if v == WeaponType::Scythe as i16 => WeaponType::Scythe,
            v if v == WeaponType::Fist as i16 => WeaponType::Fist,
            v if v == WeaponType::Claw as i16 => WeaponType::Claw,
            v if v == WeaponType::Whip as i16 => WeaponType::Whip,
            v if v == WeaponType::ColossalWeapon as i16 => WeaponType::ColossalWeapon,
            v if v == WeaponType::LightBow as i16 => WeaponType::LightBow,
            v if v == WeaponType::Bow as i16 => WeaponType::Bow,
            v if v == WeaponType::Greatbow as i16 => WeaponType::Greatbow,
            v if v == WeaponType::Crossbow as i16 => WeaponType::Crossbow,
            v if v == WeaponType::Ballista as i16 => WeaponType::Ballista,
            v if v == WeaponType::Staff as i16 => WeaponType::Staff,
            v if v == WeaponType::Seal as i16 => WeaponType::Seal,
            v if v == WeaponType::SmallShield as i16 => WeaponType::SmallShield,
            v if v == WeaponType::MediumShield as i16 => WeaponType::MediumShield,
            v if v == WeaponType::Greatshield as i16 => WeaponType::Greatshield,
            v if v == WeaponType::Arrow as i16 => WeaponType::Arrow,
            v if v == WeaponType::Greatarrow as i16 => WeaponType::Greatarrow,
            v if v == WeaponType::Bolt as i16 => WeaponType::Bolt,
            v if v == WeaponType::BallistaBolt as i16 => WeaponType::BallistaBolt,
            v if v == WeaponType::Torch as i16 => WeaponType::Torch,
            v if v == WeaponType::HandToHand as i16 => WeaponType::HandToHand,
            v if v == WeaponType::ThrustingShield as i16 => WeaponType::ThrustingShield,
            v if v == WeaponType::ThowingBlade as i16 => WeaponType::ThowingBlade,
            v if v == WeaponType::ReverseHandBlade as i16 => WeaponType::ReverseHandBlade,
            v if v == WeaponType::LightGreatSword as i16 => WeaponType::LightGreatSword,
            v if v == WeaponType::GreatKatana as i16 => WeaponType::GreatKatana,
            v if v == WeaponType::BeastClaw as i16 => WeaponType::BeastClaw,
            _ => WeaponType::None,
        }
    }
}

impl ToString for WeaponType {
    fn to_string(&self) -> String {
        match self {
            WeaponType::None => format!("None"),
            WeaponType::Dagger => format!("Dagger"),
            WeaponType::StraightSword => format!("Straight Sword"),
            WeaponType::Greatsword => format!("Greatsword"),
            WeaponType::ColossalSword => format!("Colossal Sword"),
            WeaponType::CurvedSword => format!("Curved Sword"),
            WeaponType::CurvedGreatsword => format!("Curved Greatsword"),
            WeaponType::Katana => format!("Katana"),
            WeaponType::Twinblade => format!("Twinblade"),
            WeaponType::ThrustingSword => format!("Thrusting Sword"),
            WeaponType::HeavyThrustingSword => format!("Heavy Thrusting Sword"),
            WeaponType::Axe => format!("Axe"),
            WeaponType::Greataxe => format!("Greataxe"),
            WeaponType::Hammer => format!("Hammer"),
            WeaponType::GreatHammer => format!("Great Hammer"),
            WeaponType::Flail => format!("Flail"),
            WeaponType::Spear => format!("Spear"),
            WeaponType::HeavySpear => format!("HeavySpear"),
            WeaponType::Halberd => format!("Halberd"),
            WeaponType::Scythe => format!("Scythe"),
            WeaponType::Fist => format!("Fist"),
            WeaponType::Claw => format!("Claw"),
            WeaponType::Whip => format!("Whip"),
            WeaponType::ColossalWeapon => format!("Colossal Weapon"),
            WeaponType::LightBow => format!("LightBow"),
            WeaponType::Bow => format!("Bow"),
            WeaponType::Greatbow => format!("Greatbow"),
            WeaponType::Crossbow => format!("Crossbow"),
            WeaponType::Ballista => format!("Ballista"),
            WeaponType::Staff => format!("Staff"),
            WeaponType::Seal => format!("Seal"),
            WeaponType::SmallShield => format!("SmallShield"),
            WeaponType::MediumShield => format!("MediumShield"),
            WeaponType::Greatshield => format!("Greatshield"),
            WeaponType::Arrow => format!("Arrow"),
            WeaponType::Greatarrow => format!("Greatarrow"),
            WeaponType::Bolt => format!("Bolt"),
            WeaponType::BallistaBolt => format!("BallistaBolt"),
            WeaponType::Torch => format!("Torch"),
            WeaponType::HandToHand => format!("Hand-to-hand"),
            WeaponType::ThrustingShield => format!("Thrusting Shield"),
            WeaponType::ThowingBlade => format!("Thowing Blade"),
            WeaponType::ReverseHandBlade => format!("Reverse-hand Blade"),
            WeaponType::LightGreatSword => format!("Light GreatSword"),
            WeaponType::GreatKatana => format!("Great Katana"),
            WeaponType::BeastClaw => format!("Beast Claw"),
        }
    }
}
